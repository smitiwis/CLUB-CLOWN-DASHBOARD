// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model rol {
  id_rol String @id @default(uuid())
  nombre String @unique @db.VarChar(20) // Ejemplo: "admin", "comercial", "marketing"
  estado String @default("1") @db.VarChar(1) // 1: activo, 0: inactivo

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  usuarios usuario[] // Relación uno a muchos con "usuario"
}

// ================== ASSESORES ==================
model usuario {
  id_usuario String @id @default(uuid())
  id_rol     String

  tipo_documento String @default("") @db.VarChar(1)
  nro_documento  String @unique @db.VarChar(15)
  nombre         String @db.VarChar(30)
  apellido       String @db.VarChar(40)
  telefono       String @unique @db.VarChar(9)
  fecha_ingreso  String @db.VarChar(10)
  direccion      String @db.VarChar(100)
  nro_direccion  String @db.VarChar(10)
  estado         String @default("1")
  correo         String @unique @db.VarChar(60)
  password       String @db.VarChar(100)

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  cliente         cliente[]
  cliente_llamada cliente_llamada[]

  rol            rol              @relation(fields: [id_rol], references: [id_rol])
  taller_cliente taller_cliente[]
}

// ================== CLIENTE O LEADS ==================
model cliente {
  id_cliente String @id @default(uuid())
  id_usuario String

  telefono       String  @unique @db.VarChar(9)
  tipo_documento String  @default("") @db.VarChar(1)
  nro_documento  String? @unique @db.VarChar(15)
  nombre_apo     String  @db.VarChar(50)
  nombre         String  @db.VarChar(50)
  apellido       String  @db.VarChar(50)
  edad           String  @db.VarChar(2)
  direccion      String  @db.VarChar(100)
  nro_direccion  String  @db.VarChar(10)
  origen         String  @default("3") @db.VarChar(1)
  grupo          String  @db.VarChar(1) // 1: niños, 2: jóvenes, 3: adultos
  categoria      String  @default("1") @db.VarChar(1) // 1: "clown regular", 2: "clown para parejas", 3: "full day clown"
  estado         String  @default("3") @db.VarChar(1)

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  usuario          usuario            @relation(fields: [id_usuario], references: [id_usuario])
  cliente_llamada  cliente_llamada[]
  taller_cliente   taller_cliente[]
  taller_historial taller_historial[]

  @@index([telefono])
}

// ================== CLIENTE LLAMADA ==================
model cliente_llamada {
  id_cliente_llamada String    @id @default(uuid())
  id_cliente         String
  id_usuario         String
  estado             String    @default("3") @db.VarChar(1)
  observacion        String    @db.Text
  tipo               String    @default("3") @db.VarChar(1)
  resultado          String    @default("1") @db.VarChar(1)
  fecha_agendada     DateTime?
  estado_agenda      String?   @default("") @db.VarChar(1)

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  cliente cliente @relation(fields: [id_cliente], references: [id_cliente])
  usuario usuario @relation(fields: [id_usuario], references: [id_usuario])

  @@index([id_cliente, id_usuario])
}

// ================== TALLERES ==================  
model taller {
  id_taller   String   @id @default(uuid())
  id_profesor String
  nombre      String   @db.VarChar(50)
  dias        String[] @db.VarChar(50)
  hora        String   @db.VarChar(20)
  precio      Float
  cant_clases Int      @default(4)
  estado      String   @default("1") @db.VarChar(1) // 1: activo, 0: inactivo

  // NO DEBERIA SER EL ALUMNO INSCRITO EL QUE TENGA EL ESTADO DE ASISTENCIA?
  // estado_asist        String   @default("0") @db.VarChar(1) // 0: pendiente | 1: completo
  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  // Relación con profesor
  profesor       profesor         @relation(fields: [id_profesor], references: [id_profesor])
  taller_cliente taller_cliente[]

  // Relación con historial de cambios de taller
  historial_origen  taller_historial[] @relation(name: "taller_origen_rel")
  historial_destino taller_historial[] @relation(name: "taller_destino_rel")

  @@index([id_profesor]) // Índice para facilitar las consultas
}

// ================== PROFESORES ==================
model profesor {
  id_profesor         String   @id @default(uuid())
  nombre              String   @db.VarChar(50)
  apellidos           String   @db.VarChar(50)
  email               String   @unique @db.VarChar(100)
  telefono            String?  @db.VarChar(15)
  especialidad        String?  @db.VarChar(100) // Ejemplo: "Clown, Improvisación"
  estado              String   @default("1") @db.VarChar(1)
  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  // Relación con talleres
  talleres taller[] // Un profesor puede enseñar múltiples talleres
}

// ================== INSCRIPCIONES ==================
model taller_cliente {
  id_taller_cliente   String @id @default(uuid())
  id_cliente          String
  id_taller           String
  id_taller_promocion String
  id_usuario          String // Id del asesor que inscribió al cliente
  estado_pago         String @default("pago_pend") // sin_pago | pago_pend | pago_compl
  precio_venta        Float
  observacion         String @default("") @db.Text
  estado              String @default("1") @db.VarChar(1) // 0: retirado | 1: activo | 2: Trasladado | 3: Finalizado | 4: Expulsado

  fecha_inscripcion   DateTime @default(now())
  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  // Relaciones
  cliente              cliente                @relation(fields: [id_cliente], references: [id_cliente])
  taller               taller                 @relation(fields: [id_taller], references: [id_taller])
  taller_promocion     taller_promocion       @relation(fields: [id_taller_promocion], references: [id_taller_promocion])
  usuario              usuario                @relation(fields: [id_usuario], references: [id_usuario]) // Relación con el asesor que inscribió
  taller_cliente_pagos taller_cliente_pagos[]
  taller_asistencia    taller_asistencia[]

  @@unique([id_cliente, id_taller]) // Clave única para evitar duplicados
}

// ================== TALLER PROMOCION ==================
model taller_promocion {
  id_taller_promocion String @id @default(uuid())
  nombre              String @db.VarChar(50)
  descuento           Float
  detalles            String @db.Text
  estado              String @default("1") @db.VarChar(1) // 1: activo, 0: inactivo

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  // Relaciones
  talleres_clientes taller_cliente[]
}

// ================== CLIENTE PAGOS ==================
model taller_cliente_pagos {
  id_taller_cliente_pago String @id @default(uuid())
  id_taller_cliente      String

  monto           Float
  img_boucher     String   @db.Text
  metodo_pago     String   @db.VarChar(20)
  nro_transaccion String   @default("") @db.VarChar(25)
  fecha_pago      DateTime

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  // Relaciones
  taller_cliente taller_cliente @relation(fields: [id_taller_cliente], references: [id_taller_cliente])

  // Índices
  @@index([id_taller_cliente])
}

// ================== INSCRITOS ASISTENCIA ==================

model taller_asistencia {
  id_asistencia     String   @id @default(uuid())
  id_taller_cliente String
  fecha_asistencia  DateTime @default(now())
  estado            String   @default("1") @db.VarChar(1) // 1: asistió, 0: falta

  fecha_creacion      DateTime @default(now())
  fecha_actualizacion DateTime @updatedAt

  // Relaciones
  taller_cliente taller_cliente @relation(fields: [id_taller_cliente], references: [id_taller_cliente])

  // Índices
  @@index([id_taller_cliente])
}

// ================== REGISTRAR CAMBIOS DE TALLER - HORAS Y FECHAS ACUMULADAS ==================
model taller_historial {
  id_historial        String @id @default(uuid())
  id_cliente          String
  id_taller_origen    String
  id_taller_destino   String
  asistencias_previas Int

  fecha_cambio DateTime @default(now())

  cliente        cliente @relation(fields: [id_cliente], references: [id_cliente])
  taller_origen  taller  @relation(fields: [id_taller_origen], references: [id_taller], name: "taller_origen_rel")
  taller_destino taller  @relation(fields: [id_taller_destino], references: [id_taller], name: "taller_destino_rel")

  @@index([id_cliente])
}

// id_cliente: Identifica al usuario.
// id_taller_origen: Taller anterior.
// id_taller_destino: Nuevo taller.
// asistencias_previas: Número de asistencias antes del cambio.
// fecha_cambio: Momento en que se hizo el traslado.
